@model KnockoutIntro.Models.Author

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Author</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="firstName">First Name</label>
                <div class="col-sm-10">
                    <input data-bind="value: firstName" type="text" class="form-control" id="firstName" placeholder="First Name..." name="firstName">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="lastName">Last Name</label>
                <div class="col-sm-10">
                    <input data-bind="value: lastName" type="text" class="form-control" id="lastName" placeholder="Last Name..." name="lastName">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="biography">Biography</label>
                <div class="col-sm-10">
                    <input data-bind="value: biography" type="text" class="form-control" id="biography" placeholder="Biography..." name="biography">
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>   
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
</div>

<script>
    function authorViewModel() {
        var self = this;
        self.firstName = ko.observable("");
        self.lastName = ko.observable("");
        self.biography = ko.observable("");

        self.result = ko.computed(function () {
            return {
                FirstName: self.firstName(),
                LastName: self.lastName(),
                Biography: self.biography()
            }
        });

        self.save = function () {
            var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
            console.log(antiForgeryToken);
            console.log(ko.toJSON(self.result()));
            $.ajax("/Author/Create", {
                beforeSend: function (request) {
                    request.setRequestHeader("RequestVerificationToken", antiForgeryToken);
                },
                data: ko.toJS(self.result()),
                type: "POST",
                contentType: 'application/x-www-form-urlencoded',

            })
            .done(function (msg) {
                console.log("done!!")
                console.log(msg);
                window.location = "/Author/Index";
            })
            .fail(function (msg) {
                console.log("failed!!")
                console.log(msg);
            });
        };
    };

    ko.applyBindings(new authorViewModel());

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}