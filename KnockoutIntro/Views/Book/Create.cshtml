@model KnockoutIntro.Models.Book

@{
    ViewData["Title"] = "Create";
   
}

<h1>Create</h1>

<h4>Author</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="title">Title</label>
                <div class="col-sm-10">
                    <input data-bind="value: title" type="text" class="form-control" id="title" placeholder="Title..." name="title">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="isbn">ISBN</label>
                <div class="col-sm-10">
                    <input data-bind="value: isbn" type="text" class="form-control" id="isbn" placeholder="ISBN..." name="isbn">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="synopsis">Synopsis</label>
                <div class="col-sm-10">
                    <input data-bind="value: synopsis" type="text" class="form-control" id="synopsis" placeholder="Synopsis..." name="synopsis">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="description">Description</label>
                <div class="col-sm-10">
                    <input data-bind="value: description" type="text" class="form-control" id="description" placeholder="Description..." name="description">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="imageUrl">Image Url</label>
                <div class="col-sm-10">
                    <input data-bind="value: imageUrl" type="text" class="form-control" id="imageUrl" placeholder="Description..." name="imageUrl">
                </div>
            </div>
            <div class="form-group">
                <label for="authorId">Select Author</label>
                <select class="form-control" data-bind="options: availableAuthors, value: selectedAuthor, optionsText: function(item) { return item.FirstName }, optionsValue: function(item) { return item.Id } , optionsCaption:'Select Author...'">
                </select>
            </div>
            <div class="form-group">
                <button data-bind="click: save" type="" class="btn btn-primary">Submit</button>
            </div>
        </form>
    </div>
</div>

<div>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
</div>
<script>
    var authors = @Html.Raw(ViewData["authors"]);
    function bookViewModel() {
        var self = this;
        self.title = ko.observable("");
        self.isbn = ko.observable("");
        self.synopsis = ko.observable("");
        self.description = ko.observable("");
        self.imageUrl = ko.observable("");
        self.availableAuthors = ko.observableArray(authors);
        self.selectedAuthor = ko.observable();

        self.result = ko.computed(function () {
            return {
            Title: self.title(),
            Isbn: self.isbn(),
            Synopsis: self.synopsis(),
            Description: self.description(),
            ImageUrl: self.description(),
            AuthorId: self.selectedAuthor()
            }
        });

        self.save = function () {
            var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
            console.log(antiForgeryToken);
            console.log(ko.toJSON(self.result()));
            $.ajax("/Book/Create", {
                beforeSend: function (request) {
                    request.setRequestHeader("RequestVerificationToken", antiForgeryToken);
                },
                data: ko.toJS(self.result()),
                type: "POST",
                contentType: 'application/x-www-form-urlencoded',

            })
            .done(function (msg) {
                console.log("done!!")
                console.log(msg);
                window.location = "/Book/Index";
            })
            .fail(function (msg) {
                console.log("failed!!")
                console.log(msg);
            });
        };
    };

    ko.applyBindings(new bookViewModel());

</script>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

