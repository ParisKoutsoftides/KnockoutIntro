@model KnockoutIntro.Models.Book

@{
    ViewData["Title"] = "Create";

}

<h1>Create</h1>

<h4>Book</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm("Create", "Book", FormMethod.Post, new { data_bind = "submit: validateAndSave" }))
        {
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", data_bind = "value: title", placeholder = "Title..." } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Isbn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Isbn, new { htmlAttributes = new { @class = "form-control", data_bind = "value: isbn", placeholder = "ISBN..." } })
                    @Html.ValidationMessageFor(model => model.Isbn, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Synopsis, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Synopsis, new { htmlAttributes = new { @class = "form-control", data_bind = "value: synopsis", placeholder = "Synopsis..." } })
                    @Html.ValidationMessageFor(model => model.Synopsis, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", data_bind = "value: description", placeholder = "Description..." } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control", data_bind = "value: imageUrl", placeholder = "Image URL..." } })
                    @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="authorId">Select Author</label>
                <select class="form-control" data-bind="options: availableAuthors, value: selectedAuthor, optionsText: function(item) { return item.FirstName }, optionsValue: function(item) { return item.Id } , optionsCaption:'Select Author...'">
                </select>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        }
    </div>
</div>

<div>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
</div>

<script>
    var authors = @Html.Raw(ViewData["authors"]);
    function bookViewModel() {
        var self = this;
        self.title = ko.observable("");
        self.isbn = ko.observable("");
        self.synopsis = ko.observable("");
        self.description = ko.observable("");
        self.imageUrl = ko.observable("");
        self.availableAuthors = ko.observableArray(authors);
        self.selectedAuthor = ko.observable();

        self.result = ko.computed(function () {
            return {
                Title: self.title(),
                Isbn: self.isbn(),
                Synopsis: self.synopsis(),
                Description: self.description(),
                ImageUrl: self.description(),
                AuthorId: self.selectedAuthor()
            }
        });

        self.validateAndSave = function(form) {

            if (!$(form).valid())
                return false;

            var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
            $.ajax("/Book/Create", {
                beforeSend: function (request) {
                    request.setRequestHeader("RequestVerificationToken", antiForgeryToken);
                },
                data: ko.toJS(self.result()),
                type: "POST",
                contentType: 'application/x-www-form-urlencoded',
                success: function () {
                    console.log("sucess");
                    $('.body-content').prepend('<div class="alert alert-success"><strong>Success!</strong> The new book has been saved.</div>');
                    setTimeout(function () { location.href = './'; }, 1000);
                },
                error: function () {
                    console.log("fail");
                    $('.body-content').prepend('<div class="alert alert-danger"><strong>Error!</strong> There was an error creating the book.</div>');
                }
            });
        };
    };

    ko.applyBindings(new bookViewModel());

</script>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

